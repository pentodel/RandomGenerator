import random
import time


# Sideways dot graph!
def print_graph(a_list):
    # Prints the index and then a dot for the number stored at that index.
    for i in range(2, 13):
        mid = "|"
        # Formatting to ensure that the vertical line appears in the right place each time.
        if i < 10:
            mid = " |"
        print(str(i) + mid, end='')
        print('.' * a_list[i - 2])
    return


# Easier to see number version of the above...
def print_probabilities(a_list):
    print("Result probabilities: ")
    total = 0
    for eachNum in a_list:
        total += eachNum
    for j in range(0, 11):
        print(str(j + 2) + "|" + str(round(a_list[j] / total, 3)))
    return


# Generates a random, valid Powerball
def get_powerball():
    a_list = [0, 0, 0, 0, 0, 0]
    current_index = 0
    # Set the first five numbers
    while a_list[4] == 0:
        num = random.randint(1, 69)
        # Numbers must be unique
        duplicate = False
        for k in range(0, current_index + 1):
            if num == a_list[k]:
                duplicate = True
                break
        if not duplicate:
            a_list[current_index] = num
            # Only move on to the next ticket number if the number is not a duplicate
            current_index += 1
    # Set Powerball number
    a_list[5] = random.randint(1, 26)
    return a_list


# Prints the Powerball in the right formatting
def print_powerball(a_list):
    print(str(a_list[0]) + " " + str(a_list[1]) + " " + str(a_list[2]) + " " + str(a_list[3]) + " " + str(a_list[4]) +
          " +" + str(a_list[5]))
    return


# Compares two Powerballs and returns an array of bools that determines which corresponding numbers match
def compare_powerball(list1, list2):
    a_list = [False, False, False, False, False, False]
    # Start with an array with all values false, but change individuals to true if both numbers at that index match.
    for l in range(0, 6):
        if list1[l] == list2[l]:
            a_list[l] = True
    return a_list


# Returns true if the list generated by compare_powerball() is full of True
def is_completely_correct(a_list):
    # Cycles through a list of bools and returns false if one of them is false.
    for each_bool in a_list:
        if not each_bool:
            return False
    return True


# Takes in guesses and to fill the Powerball list
# Forces legal input
def get_powerball_guess(empty_guess):
    for m in range(0, 6):
        # This is for the first five numbers
        if m < 5:
            while empty_guess[m] == 0:
                try:
                    empty_guess[m] = int(input("For #" + str(m + 1) + " enter a unique number from 1-69: "))
                    # Check to make sure that the number hasn't been used before in the guess
                    # Because it goes from 0 to m, at index 0, the for loop should be skipped
                    # as the first number definitely can't be a duplicate.
                    for z in range(0, m):
                        if empty_guess[m] == empty_guess[z]:
                            empty_guess[m] = 0
                            print("Duplicate number! ", end="")
                            break
                    # If out of range, set empty_guess[m] back to 0 so it loops again
                    # and then raise an error so the user knows the input was bad.
                    if empty_guess[m] < 1 or empty_guess[m] > 69:
                        empty_guess[m] = 0
                        raise ValueError
                except ValueError:
                    print("Invalid input! Try again!")
        # This is for the last number, which has a different range
        elif m == 5:
            while empty_guess[m] == 0:
                try:
                    empty_guess[m] = int(input("Enter the Powerball number (1-26): "))
                    # No duplicate checking...but otherwise does the same as the above
                    if empty_guess[m] < 1 or empty_guess[m] > 26:
                        empty_guess[m] = 0
                        raise ValueError
                except ValueError:
                    print("Invalid input! Try again!")
        print("Current guess: ", end="")
        print_powerball(empty_guess)
    return


# Roll Two Dice menu item
def roll_two_dice():
    # Make a list for each possible sum combination of two dice: 2 thru 13
    # Each number represents the number of times that sum was rolled
    results = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    print("Let's do an experiment!")
    print("Let's roll two dice and what the probabilities are!")
    # This while loop enables the user to keep adding new rolls to the list as long as they want.
    valid = True
    while valid:
        print()
        # This while loop is for error handling.
        times = -1
        while times == -1:
            try:
                times = int(input("How many times should we roll the dice? "))
                if times < 0:
                    times = -1
                    raise ValueError
            except ValueError:
                print("Invalid input! Please try again!")
                times = -1
        print()
        # Basically gets two in range random numbers, and then adds the sum into the results array
        for x in range(0, times):
            rand1 = random.randint(1, 6)
            rand2 = random.randint(1, 6)
            print("Roll " + str(x + 1) + ": " + str(rand1) + ", " + str(rand2))
            added = rand1 + rand2
            results[added - 2] += 1

        # Displays the results of the above loop to the user
        print()
        print("Graph Results:")
        print_graph(results)
        print()
        print_probabilities(results)
        print()
        print("Do you want to roll again?")
        if input("[y] Yes, [enter] Back to Menu: ") != "y":
            valid = False
        print()


# Magic 8 Ball menu item
def magic_eight_ball():
    repeating = True
    while repeating:
        print()
        # This isn't pretty but it's basically just filling up the magic_answers list with the 8 ball responses
        magic_answers = [""] * 20
        magic_answers[0] = "It is certain."
        magic_answers[1] = "It is decidedly so."
        magic_answers[2] = "Without a doubt."
        magic_answers[3] = "Yes - definitely."
        magic_answers[4] = "You may rely on it."
        magic_answers[5] = "As I see it, yes."
        magic_answers[6] = "Most likely."
        magic_answers[7] = "Outlook good."
        magic_answers[8] = "Yes."
        magic_answers[9] = "Signs point to yes."
        magic_answers[10] = "Reply hazy, try again."
        magic_answers[11] = "Ask again later."
        magic_answers[12] = "Better not tell you now."
        magic_answers[13] = "Cannot predict now."
        magic_answers[14] = "Concentrate and ask again."
        magic_answers[15] = "Don't count on it."
        magic_answers[16] = "My reply is no."
        magic_answers[17] = "My sources say no."
        magic_answers[18] = "Outlook not so good."
        magic_answers[19] = "Very doubtful."
        # Test display, but with several dramatic pauses for effect
        print("Are you ready to have your fortune read?")
        time.sleep(1)
        print("Think of a question! Now...")
        time.sleep(1)
        print("Step up to the magic 8 ball and give it a nice shake...")
        print()
        input("[press enter to shake the ball]")
        print("*shcka schka schka schka*")
        print()
        time.sleep(1)
        print("And the results are!")
        # Selects a random number
        magic_picker = random.randint(0, 19)
        print()
        time.sleep(2)
        # Prints the string located at that position in the list
        print("+++++  " + magic_answers[magic_picker] + "  +++++")
        print()
        time.sleep(3)
        # Interprets the answer if it is positive, negative, or not
        if magic_picker < 10:
            print("Looks like that's a yes! Want to try again?")
        elif magic_picker < 15:
            print("What a non-answer! Want to try again?")
        else:
            print("Looks like that's a no! Want to try again?")
        if input("[y] Yes, [enter] Back to Menu: ") != "y":
            repeating = False
        print()


# Random Sentence Maker menu item
def random_sentence_generator():
    going = True
    while going:
        print()
        # Lists
        noun = ["train", "tree", "person", "cat", "baseball", "computer", "fish", "pizza", "dog", "game", "sword",
                "bee", "cow", "straw", "horse", "thespian", "farmer", "scooter", "skateboard", "bicycle",
                "ice cream", "monkey", "boat", "mountain", "speaker"]
        verb = ["hits", "helps", "paints", "mends", "soothes", "cooks", "decorates", "laugh at", "talks to",
                "attacks", "improves", "thanks", "cheers on", "shares", "picks", "carries", "yells at", "hugs",
                "proposes to", "hears", "scares"]
        location = ["zoo", "park", "school", "restaurant", "ocean", "freeway", "forest", "plaza", "mall",
                    "classroom", "information superhighway", "outer space", "beach"]
        preposition = ["At", "In", "Under", "Inside", "Behind", "Near", "On"]
        conjunction = ["and", "or", "but", "yet", "so"]
        # Begin
        print("Let's make a random sentence!")
        print("I have already prepared a list of words.")
        print("I'll leave it up to you to decide on the sentence structure!")
        print()
        # Only makes simple sentences...
        # The idea here is that all sentences have the basic "Subject Verb Object" sentence structure
        # It doesn't get too complex though.
        print("Enter y for yes and anything else for no.")
        # Add-ons
        prep = input("Do you want a prepositional phrase? ")
        indclause = input("Do you want two independent clauses? ")
        print()
        print("Generating sentence...")
        result_sentence = ""
        # Adds a prepositional phrase to the start of the sentence, and then starts of the independent clause
        # Otherwise starts the independent clause.
        if prep == "y":
            result_sentence += random.choice(preposition)
            result_sentence += " the "
            result_sentence += random.choice(location)
            result_sentence += ", the "
        else:
            result_sentence += "The "
        # Puts together the base essential independent clause. Will be run.
        result_sentence += random.choice(noun)
        result_sentence += " "
        result_sentence += random.choice(verb)
        result_sentence += " the "
        result_sentence += random.choice(noun)
        # Adds a second independent clause of selected
        if indclause == "y":
            result_sentence += ", "
            result_sentence += random.choice(conjunction)
            result_sentence += " the "
            result_sentence += random.choice(noun)
            result_sentence += " "
            result_sentence += random.choice(verb)
            result_sentence += " the "
            result_sentence += random.choice(noun)
        # Period to end the sentence.
        result_sentence += "."
        # Print results.
        input("[press enter for results]")
        print()
        print(result_sentence)
        print()
        if input("[y] Play Again, [enter] Back to Menu: ") != "y":
            going = False
        print()


# Powerball Simulator menu item
# Warning: This code can be a little hard to read without the ability to collapse code blocks.
# With the ability to collapse code blocks, it can become quite straightforward.
def powerball_simulator():
    # Outside loop to ensure that the user can remain in the Powerball simulator as long as they want.
    looping = True
    while looping:
        print()
        print("Powerball Simulator Menu")
        print("Please note! The order of the numbers is important!")
        print("Would you like to:")
        print("a) Try to guess a randomly generated Powerball lottery number.")
        print("b) Try an assisted version of the above. (Comes with hints!)")
        print("c) Generate a random Powerball lottery number.")
        powerball_selection = ""
        # While loop to make sure menu selection is valid.
        invalid_selection = True
        while invalid_selection:
            powerball_selection = input("Enter a letter: ")
            if powerball_selection != "a" and powerball_selection != "b" and powerball_selection != "c":
                print("Invalid input! Please try again!")
            else:
                invalid_selection = False

        # First selection...
        # Guess a randomly generated Powerball lottery number with no assistance.
        if powerball_selection == "a":
            # While loop to ensure that user can stay in this menu item as long as they want.
            one_round = True
            while one_round:
                # Generate the random lotto number.
                powerball = get_powerball()
                print()
                keep_guessing = True
                while keep_guessing:
                    # Get the user guess.
                    print("Enter your guess: ")
                    guess = [0, 0, 0, 0, 0, 0]
                    get_powerball_guess(guess)
                    print()
                    # Determine if guess is valid. It's probably not.
                    print("This guess is...", end="")
                    is_correct = is_completely_correct(compare_powerball(powerball, guess))
                    print(str(is_correct) + "!")
                    print()
                    # If the user guessed wrong, these are their options.
                    if not is_correct:
                        print("1) Guess again.")
                        print("2) See the right answer.")
                        print("3) Start Over.")
                        print("4) Return to the Powerball menu.")
                        # Error handling for the continue menu
                        cont_menu = -1
                        while cont_menu == -1:
                            try:
                                cont_menu = int(input("Enter a number: "))
                                if cont_menu < 1 or cont_menu > 4:
                                    cont_menu = -1
                                    raise ValueError
                            except ValueError:
                                print("Invalid input! Please try again!")
                        # If the user wants to guess again, no special handling is needed. The loop will run again.
                        # If the user sees the right answer, this instance of the game must be terminated.
                        # The new menu only has two options.
                        if cont_menu == 2:
                            print("The correct answer is: ", end="")
                            print_powerball(powerball)
                            print()
                            print("1) Play again.")
                            print("2) Return to the Powerball menu.")
                            cont_menu = -1
                            while cont_menu == -1:
                                try:
                                    cont_menu = int(input("Enter a number: "))
                                    if cont_menu < 1 or cont_menu > 2:
                                        cont_menu = -1
                                        raise ValueError
                                except ValueError:
                                    print("Invalid input! Please try again!")
                            if cont_menu == 1:
                                keep_guessing = False
                            else:
                                keep_guessing = False
                                one_round = False
                        # Start over. Exit the game instance loop but not the option A loop.
                        if cont_menu == 3:
                            keep_guessing = False
                        # Exit both the game instance loop and the option A loop.
                        if cont_menu == 4:
                            keep_guessing = False
                            one_round = False
                    # In the event that the user guessed right...
                    if is_correct:
                        print("You got the right number!")
                        print("Your guess: ", end="")
                        print_powerball(guess)
                        print("Correct answer: ", end="")
                        print_powerball(powerball)
                        print()
                        # Basic two option menu, same as when the user reveals the answer if they got it wrong
                        print("1) Play again.")
                        print("2) Return to the Powerball menu.")
                        cont_menu = -1
                        while cont_menu == -1:
                            try:
                                cont_menu = int(input("Enter a number: "))
                                if cont_menu < 1 or cont_menu > 2:
                                    cont_menu = -1
                                    raise ValueError
                            except ValueError:
                                print("Invalid input! Please try again!")
                        if cont_menu == 1:
                            keep_guessing = False
                        else:
                            keep_guessing = False
                            one_round = False
        elif powerball_selection == "b":
            # Very similar to the above. Will comment minimally to avoid repeating myself too much...
            two_round = True
            while two_round:
                powerball = get_powerball()
                print()
                keep_guessing = True
                while keep_guessing:
                    print("Enter your guess: ")
                    guess = [0, 0, 0, 0, 0, 0]
                    # Get and compare the lotto number guess.
                    get_powerball_guess(guess)
                    # This retrieves the list of booleans to show which answers are right.
                    correct_list = compare_powerball(guess, powerball)
                    for n in range(0, 6):
                        # Say whether each item is correct
                        print("#" + str(n + 1) + "| " + str(guess[n]) + " is " + str(correct_list[n]) + ". ", end="")
                        # If not correct, say whether the number is too big or too small
                        # Basically just 6 binary search games running at once. What a doozy!
                        if not correct_list[n]:
                            print(str(guess[n]) + " is ", end="")
                            if guess[n] < powerball[n]:
                                print("too low!")
                            else:
                                print("too high!")
                        else:
                            print()
                    # Tells the user if they got all of the numbers right or not.
                    is_correct = is_completely_correct(correct_list)
                    print(str(is_correct) + "!")
                    print()
                    # If not correct, here's the menu from before.
                    if not is_correct:
                        print("1) Guess again.")
                        print("2) See the right answer.")
                        print("3) Start Over.")
                        print("4) Return to the Powerball menu.")
                        cont_menu = -1
                        while cont_menu == -1:
                            try:
                                cont_menu = int(input("Enter a number: "))
                                if cont_menu < 1 or cont_menu > 4:
                                    cont_menu = -1
                                    raise ValueError
                            except ValueError:
                                print("Invalid input! Please try again!")
                        if cont_menu == 2:
                            print("The correct answer is: ", end="")
                            print_powerball(powerball)
                            print()
                            # Once again, 2 option menu to boot you out of the game instance if you look at the answer
                            print("1) Play again.")
                            print("2) Return to the Powerball menu.")
                            cont_menu = int(input("Enter a number: "))
                            print()
                            if cont_menu == 1:
                                keep_guessing = False
                            else:
                                keep_guessing = False
                                two_round = False
                        if cont_menu == 3:
                            keep_guessing = False
                        if cont_menu == 4:
                            keep_guessing = False
                            two_round = False
                    # Here's if you're right
                    if is_correct:
                        print("You got the right number!")
                        print("Your guess: ", end="")
                        print_powerball(guess)
                        print("Correct answer: ", end="")
                        print_powerball(powerball)
                        print()
                        print("1) Play again.")
                        print("2) Return to the Powerball menu.")
                        cont_menu = -1
                        while cont_menu == -1:
                            try:
                                cont_menu = int(input("Enter a number: "))
                                if cont_menu < 1 or cont_menu > 2:
                                    cont_menu = -1
                                    raise ValueError
                            except ValueError:
                                print("Invalid input! Please try again!")
                        if cont_menu == 1:
                            keep_guessing = False
                        else:
                            keep_guessing = False
                            two_round = False
        # Much simpler in comparison, just prints you a Powerball Lottery num at random
        elif powerball_selection == "c":
            sth = True
            while sth:
                print()
                print("Your random Powerball numbers are... ", end="")
                print_powerball(get_powerball())
                if input("[y] Play Again, [enter] Back to Menu: ") != "y":
                    sth = False
        # Allows you to exit back to the Main Menu
        else:
            print("Invalid input!")
        if input("[y] Powerball Menu, [enter] Main Menu: ") != "y":
            looping = False
        print()


# Code begins here!
play = True
while play:
    print("Menu:")
    print("1| Roll Two Dice")
    print("2| Magic 8 Ball")
    print("3| Random Sentence Maker")
    print("4| Powerball Simulator")
    print("0| Exit")
    # Process selection...ensure that the inputted value is valid...
    selection = -1
    while selection == -1:
        try:
            selection = int(input("Enter the number for the menu item: "))
            if selection < 0 or selection > 4:
                selection = -1
                raise ValueError
        except ValueError:
            print("Invalid input! Please try again!")
    # Here's a nice divider bar
    print("-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-")
    # Calls the selected method...or exits.
    if selection == 1:
        roll_two_dice()
    elif selection == 2:
        magic_eight_ball()
    elif selection == 3:
        random_sentence_generator()
    elif selection == 4:
        powerball_simulator()
    elif selection == 0:
        print("Shutting down program...")
        print("Thank you for playing!")
        play = False
